name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Set up directories
        run: |
          mkdir -p data/haystack_store
          mkdir -p flask_session
          mkdir -p logs
          
      - name: Create README files to maintain directory structure
        run: |
          echo "# Haystack Store Directory\nThis directory is used for storing Haystack memory persistence files." > data/haystack_store/README.md
          echo "# Flask Session Directory\nThis directory is used for storing Flask session files." > flask_session/README.md
          echo "# Log Files Directory\nThis directory contains log files generated by the application." > logs/README.md

      - name: Run pytest tests
        id: pytest
        run: |
          python -m pytest tests/ -v --ignore=tests/test_api.py
        env:
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TESTING: "true"
        continue-on-error: true

      - name: Check test results
        if: steps.pytest.outcome != 'success'
        run: |
          echo "::error::Tests failed. Please check the test output above."
          exit 1

  deploy:
    name: Deploy to Railway
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Deploy to Railway
        id: deploy
        run: |
          if ! railway up; then
            echo "DEPLOY_STATUS=failed" >> $GITHUB_ENV
            exit 1
          fi
          echo "DEPLOY_STATUS=success" >> $GITHUB_ENV
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        continue-on-error: true
      
      - name: Verify deployment status
        if: env.DEPLOY_STATUS == 'success'
        run: |
          echo "Deployment to Railway completed successfully"
          echo "Application should now be available at your Railway domain"
          
      - name: Report deployment failure
        if: env.DEPLOY_STATUS != 'success'
        run: |
          echo "::error::Deployment to Railway failed. Check the Railway CLI output above."
          exit 1
        
    outputs:
      deploy_status: ${{ env.DEPLOY_STATUS }}
        
  notify:
    name: Notify deployment status
    if: always()
    needs: [test, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Check test job status
        if: needs.test.result != 'success'
        run: |
          echo "## ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
          echo "The tests did not pass. Please check the test job logs for more information." >> $GITHUB_STEP_SUMMARY
          
      - name: Check deployment status
        if: needs.test.result == 'success'
        run: |
          if [[ "${{ needs.deploy.outputs.deploy_status }}" == "success" ]]; then
            echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "The application has been successfully deployed to Railway." >> $GITHUB_STEP_SUMMARY
            echo "Visit your Railway dashboard to view the deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "The deployment to Railway failed. Please check the deploy job logs for more information." >> $GITHUB_STEP_SUMMARY
          fi 